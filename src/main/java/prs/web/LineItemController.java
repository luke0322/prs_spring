package prs.web;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import prs.domain.lineitem.LineItemRepository;
import prs.domain.lineitem.PurchaseRequestLineItem;
import prs.domain.product.Product;
import prs.domain.user.User;
import prs.util.PRSMaintenanceReturn;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/LineItems") // This means URL's start with /demo (after Application path)
public class LineItemController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private LineItemRepository lineItemRepository;

	@PostMapping(path="/Add") // Map ONLY POST Requests, hidden from URL
	public @ResponseBody PRSMaintenanceReturn addNewLineItem (@RequestBody PurchaseRequestLineItem purchaseRequestLineItem) {
		//@ResponseBody means the returned Vendor is the response,not a view name
		//@RequestBody means it is a parameter from the POST request
		//vendor entity is going to transform JSON into instance of Vendor as vendor
		//if you do not request body, your values will be null
        lineItemRepository.save(purchaseRequestLineItem);
        System.out.println("Product saved:  "+purchaseRequestLineItem);
        return PRSMaintenanceReturn.getMaintReturn(purchaseRequestLineItem);
	}
	
	@PostMapping(path="/Change") // Map ONLY POST Requests, hidden from URL
	public @ResponseBody PRSMaintenanceReturn changeLineItem (@RequestBody PurchaseRequestLineItem purchaseRequestLineItem) {
		//@ResponseBody means the returned Vendor is the response,not a view name
		//@RequestBody means it is a parameter from the POST request
		//vendor entity is going to transform JSON into instance of Vendor as vendor
		//if you do not request body, your values will be null
		//pass the id in as well to change the log of the user
        lineItemRepository.save(purchaseRequestLineItem);
        System.out.println("User saved:  "+purchaseRequestLineItem);
        return PRSMaintenanceReturn.getMaintReturn(purchaseRequestLineItem);
	}
	
	@GetMapping(path="/List") //currently products and vendors are linked
	public @ResponseBody Iterable<PurchaseRequestLineItem> getAllLineItems() {
		// This returns a JSON or XML with the users
		return lineItemRepository.findAll();
	}
	
    @GetMapping(path="/Get")
    public @ResponseBody PurchaseRequestLineItem[] getLineItem(@RequestParam int id) {
        PurchaseRequestLineItem li = lineItemRepository.findOne(id);
        return getReturnArray(li);//Get?id= enter id # here
    }
    
    @GetMapping(path="/Delete") //change your delete  to match sean's
    public @ResponseBody PRSMaintenanceReturn deleteLineItem(@RequestParam int id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		PurchaseRequestLineItem purchaseRequestLineItem = lineItemRepository.findOne(id);
		lineItemRepository.delete(purchaseRequestLineItem);
		return PRSMaintenanceReturn.getMaintReturn(purchaseRequestLineItem);
    }

	private PurchaseRequestLineItem[] getReturnArray(PurchaseRequestLineItem li) {
		PurchaseRequestLineItem[] returnArray;
		if (li == null) {
			returnArray = new PurchaseRequestLineItem[0];
		} else {
			returnArray = new PurchaseRequestLineItem[1];
			returnArray[0] = li;
		}
		return returnArray;
	}
}
