package prs.web;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import prs.domain.lineitem.PurchaseRequestLineItem;
import prs.domain.product.Product;
import prs.domain.product.ProductRepository;
import prs.domain.user.User;
import prs.domain.vendor.Vendor;
import prs.domain.vendor.VendorRepository;
import prs.domain.vendor.VendorSummary;
import prs.util.PRSMaintenanceReturn;
@CrossOrigin
@Controller    // This means that this class is a Controller
@RequestMapping(path="/Vendors") // This means URL's start with /demo (after Application path)
public class VendorController extends BaseController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private VendorRepository vendorRepository;

	@Autowired
	private ProductRepository productRepository;
	
	@PostMapping(path="/Add") // Map ONLY POST Requests, hidden from URL
	public @ResponseBody PRSMaintenanceReturn addNewVendor (@RequestBody Vendor vendor) {
		//@ResponseBody means the returned Vendor is the response,not a view name
		//@RequestBody means it is a parameter from the POST request
		//translates json into a java object
		//vendor entity is going to transform JSON into instance of Vendor as vendor
		//if you do not request body, your values will be null
		System.out.println("this works");
        vendorRepository.save(vendor);
        System.out.println("Vendor saved:  "+vendor);
        return PRSMaintenanceReturn.getMaintReturn(vendor);
	}

	@PostMapping(path="/Change") // Map ONLY POST Requests, hidden from URL
	public @ResponseBody PRSMaintenanceReturn changeVendor (@RequestBody Vendor vendor) {
		//@ResponseBody means the returned Vendor is the response,not a view name
		//@RequestBody means it is a parameter from the POST request
		//vendor entity is going to transform JSON into instance of Vendor as vendor
		//if you do not request body, your values will be null
		//pass the id in as well to change the log of the vendor
        vendorRepository.save(vendor);
        System.out.println("User saved:  "+vendor);
        return PRSMaintenanceReturn.getMaintReturn(vendor);
	}
	
	@GetMapping(path="/List")
	public @ResponseBody Iterable<Vendor> getAllVendors() {
		// This returns a JSON or XML with the users
		return vendorRepository.findAll();
	}
	
//	@GetMapping(path="/Summary")
//	public  @ResponseBody List<VendorSummary> getVendorSummary (@RequestParam int vendorID){
//		VendorSummary vs = new VendorSummary();
//		Vendor vendor = vendorRepository.findOne(vendorID);
//		vs.setVendor(vendor);
//		List <Product> products = productRepository.findAllByVendorID(vendor.getId());
//		vs.setProducts(products);
//		return getReturnArray(vs);
//	}
	
	//findAllByVendorID error here, check product summary
    
	
	@GetMapping(path="/Get")
    public @ResponseBody List<Vendor> getVendor(@RequestParam int id) {
        Vendor v = vendorRepository.findOne(id);
        return getReturnArray(v);//Get?id= enter id # here
    }
    
    @GetMapping(path="/Delete") //change your delete  to match sean's
    public @ResponseBody PRSMaintenanceReturn deleteVendor(@RequestParam int id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Vendor vendor = vendorRepository.findOne(id);
		vendorRepository.delete(vendor);
		return PRSMaintenanceReturn.getMaintReturn(vendor);
    }
   

}
