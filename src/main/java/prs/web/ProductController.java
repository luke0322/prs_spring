package prs.web;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import prs.domain.lineitem.PurchaseRequestLineItem;
import prs.domain.product.Product;
import prs.domain.product.ProductRepository;
import prs.domain.product.ProductSummary;
import prs.domain.purchase.PurchaseRequest;
import prs.domain.purchase.PurchaseRequestSummary;
import prs.domain.user.User;
import prs.util.PRSMaintenanceReturn;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/Products") // This means URL's start with /demo (after Application path)
public class ProductController extends BaseController{
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private ProductRepository productRepository;

	@PostMapping(path="/Add") // Map ONLY POST Requests, hidden from URL
	public @ResponseBody PRSMaintenanceReturn addNewProduct (@RequestBody Product product) {
		//@ResponseBody means the returned Vendor is the response,not a view name
		//@RequestBody means it is a parameter from the POST request
		//vendor entity is going to transform JSON into instance of Vendor as vendor
		//if you do not request body, your values will be null
        productRepository.save(product);
        System.out.println("Product saved:  "+product);
        return PRSMaintenanceReturn.getMaintReturn(product);
	}

	@PostMapping(path="/Change") // Map ONLY POST Requests, hidden from URL
	public @ResponseBody PRSMaintenanceReturn changeProduct (@RequestBody Product product) {
		//@ResponseBody means the returned Vendor is the response,not a view name
		//@RequestBody means it is a parameter from the POST request
		//vendor entity is going to transform JSON into instance of Vendor as vendor
		//if you do not request body, your values will be null
		//pass the id in as well to change the log of the user
        productRepository.save(product);
        System.out.println("User saved:  "+product);
        return PRSMaintenanceReturn.getMaintReturn(product);
	}
	
	@GetMapping(path="/List") //currently products and vendors are linked
	public @ResponseBody Iterable<Product> getAllProducts() {
		// This returns a JSON or XML with the users
		return productRepository.findAll();
	}
	
	@GetMapping(path="/Summary")
	public @ResponseBody List<ProductSummary> getProductSummary(@RequestParam int id) {
	 // This returns a JSON or XML with the users
		ProductSummary prs = new ProductSummary();
		Product pr = productRepository.findOne(id);
		prs.setProduct(pr);
		List<Product> product = productRepository.findAllByProductId(pr.getId());
		//prs.setProduct(product); //we need to add in vendor here
	 		return getReturnArray(prs);
	 		}
    @GetMapping(path="/Get")
    public @ResponseBody List<Product> getProduct(@RequestParam int id) {
        Product p = productRepository.findOne(id);
        return getReturnArray(p);//Get?id= enter id # here
    }
    
    @GetMapping(path="/Delete") //change your delete  to match sean's
    public @ResponseBody PRSMaintenanceReturn deleteProduct(@RequestParam int id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Product product = productRepository.findOne(id);
		productRepository.delete(product);
		return PRSMaintenanceReturn.getMaintReturn(product);
    }

}
