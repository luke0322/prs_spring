package prs.web;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import prs.domain.lineitem.LineItemRepository;
import prs.domain.lineitem.PurchaseRequestLineItem;
import prs.domain.product.Product;
import prs.domain.purchase.PurchaseRepository;
import prs.domain.purchase.PurchaseRequest;
import prs.domain.purchase.PurchaseRequestSummary;
import prs.domain.status.Status;
import prs.domain.user.User;
import prs.util.PRSMaintenanceReturn;
@CrossOrigin
@Controller    // This means that this class is a Controller
@RequestMapping(path="/PurchaseRequests") // This means URL's start with /demo (after Application path)
public class PurchaseController extends BaseController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private PurchaseRepository purchaseRepository;
	@Autowired
	private LineItemRepository lineItemRepository;

	@PostMapping(path="/Add") // Map ONLY POST Requests, hidden from URL
	public @ResponseBody PRSMaintenanceReturn addNewPurchaseRequest (@RequestBody PurchaseRequest purchaseRequest) {
		//@ResponseBody means the returned Vendor is the response,not a view name
		//@RequestBody means it is a parameter from the POST request
		//vendor entity is going to transform JSON into instance of Vendor as vendor
		//if you do not request body, your values will be null
		Timestamp ts = new Timestamp(System.currentTimeMillis());
        purchaseRequest.setSubmittedDate(ts);
        purchaseRepository.save(purchaseRequest);
        System.out.println("Purchase request saved:  "+purchaseRequest);
        return PRSMaintenanceReturn.getMaintReturn(purchaseRequest);
	}
	
	@PostMapping(path="/Change") // Map ONLY POST Requests, hidden from URL
	public @ResponseBody PRSMaintenanceReturn changePurchaseRequest (@RequestBody PurchaseRequest purchaseRequest) {
		//@ResponseBody means the returned Vendor is the response,not a view name
		//@RequestBody means it is a parameter from the POST request
		//vendor entity is going to transform JSON into instance of Vendor as vendor
		//if you do not request body, your values will be null
		//pass the id in as well to change the log of the user
        purchaseRepository.save(purchaseRequest);
        System.out.println("User saved:  "+purchaseRequest);
        return PRSMaintenanceReturn.getMaintReturn(purchaseRequest);
	}
	
	@GetMapping(path="/List") //currently products and vendors are linked
	public @ResponseBody Iterable<PurchaseRequest> getAllProducts() {
		// This returns a JSON or XML with the users
		return purchaseRepository.findAll();
	}
	@GetMapping(path="/Summary")
	public @ResponseBody List<PurchaseRequestSummary> getPurchaseRequestSummary(@RequestParam int id) {
	 // This returns a JSON or XML with the users
		PurchaseRequestSummary prs = new PurchaseRequestSummary();
		PurchaseRequest pr = purchaseRepository.findOne(id);
		prs.setPurchaseRequest(pr);
		List<PurchaseRequestLineItem> prlis = lineItemRepository.findAllByPurchaseRequestID(pr.getId());
		prs.setLineItems(prlis);
	 		return getReturnArray(prs);
	 		}
    @GetMapping(path="/Get")
    public @ResponseBody List<PurchaseRequest> getProduct(@RequestParam int id) {
        PurchaseRequest pr = purchaseRepository.findOne(id);
        return getReturnArray(pr);//Get?id= enter id # here
    }
    
    @GetMapping(path="/Delete") //change your delete  to match sean's
    public @ResponseBody PRSMaintenanceReturn deletePurchaseRequest(@RequestParam int id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		PurchaseRequest purchaseRequest = purchaseRepository.findOne(id);
		purchaseRepository.delete(purchaseRequest);
		return PRSMaintenanceReturn.getMaintReturn(purchaseRequest);
    }

}
