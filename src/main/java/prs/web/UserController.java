package prs.web;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import prs.domain.user.User;
import prs.domain.user.UserRepository;
import prs.util.PRSMaintenanceReturn;

@CrossOrigin
@Controller    // This means that this class is a Controller
@RequestMapping(path="/Users") // This means URL's start with /demo (after Application path)
public class UserController extends BaseController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path="/Add") // Map ONLY POST Requests, hidden from URL
	public @ResponseBody PRSMaintenanceReturn addNewUser (@RequestBody User user) { //instead of user, PRS Maintenace Return
		//@ResponseBody means the returned Vendor is the response,not a view name
		//@RequestBody means it is a parameter from the POST request
		//vendor entity is going to transform JSON into instance of Vendor as vendor
		//if you do not request body, your values will be null
        userRepository.save(user);
        System.out.println("User saved:  "+user);
        return PRSMaintenanceReturn.getMaintReturn(user); //static method call
        //displays "success, user added
	}
	@PostMapping(path="/Change") // Map ONLY POST Requests, hidden from URL
	public @ResponseBody PRSMaintenanceReturn changeUser (@RequestBody User user) {
		//@ResponseBody means the returned Vendor is the response,not a view name
		//@RequestBody means it is a parameter from the POST request
		//vendor entity is going to transform JSON into instance of Vendor as vendor
		//if you do not request body, your values will be null
		//pass the id in as well to change the log of the user
        userRepository.save(user);
        System.out.println("User saved:  "+user);
        return PRSMaintenanceReturn.getMaintReturn(user);
	}
	
	@GetMapping(path="/Authenticate") // Map ONLY GET Requests
	public @ResponseBody List<User> authenticate (@RequestParam String uname
			, @RequestParam String pwd) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User u = userRepository.findByUserNameAndPassword(uname, pwd);
		return getReturnArray(u);
	}

	@GetMapping(path="/List")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
    @GetMapping(path="/Get")
    public @ResponseBody List<User> getUser(@RequestParam int id) {
        User u = userRepository.findOne(id);
        return getReturnArray(u);//Get?id= enter id # here
    }
    
    @GetMapping(path="/Delete") //change your delete  to match sean's
    public @ResponseBody PRSMaintenanceReturn deleteUser(@RequestParam int id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		User user = userRepository.findOne(id);
		userRepository.delete(user);
		return PRSMaintenanceReturn.getMaintReturn(user);
    }
  

}

